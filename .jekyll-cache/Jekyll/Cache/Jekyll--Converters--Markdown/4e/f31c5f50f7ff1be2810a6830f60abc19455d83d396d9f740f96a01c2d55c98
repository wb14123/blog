I"-<p>I read the Go source code about scheduler these days. They are under <code class="language-plaintext highlighter-rouge">src/pkg/runtime</code>, mainly in <code class="language-plaintext highlighter-rouge">runtime.h</code>, <code class="language-plaintext highlighter-rouge">proc.c</code> and some Assembly files. The schedulerâ€™s policy is easy to understand, because there are already many articles on this. Iâ€™m more interesting in the details. I learned how to switch the current running goroutine, which is a little mystery for me before.</p>

<h2 id="basic-structures">Basic Structures</h2>

<p>Go scheduler mainly uses three structures:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">G</code> as a Goroutine.</li>
  <li><code class="language-plaintext highlighter-rouge">M</code> as an OS thread.</li>
  <li><code class="language-plaintext highlighter-rouge">P</code> as a context. Running under threads and control the goroutines.</li>
</ul>

<p>The number of <code class="language-plaintext highlighter-rouge">P</code> is setted by <code class="language-plaintext highlighter-rouge">GOMAXPROCS</code>.</p>

<p>Each <code class="language-plaintext highlighter-rouge">M</code> has a <code class="language-plaintext highlighter-rouge">G</code> called <code class="language-plaintext highlighter-rouge">g0</code> to do schedule jobs. (<code class="language-plaintext highlighter-rouge">mcall</code> will use <code class="language-plaintext highlighter-rouge">g0</code> to execute functions).</p>

<h2 id="the-beginning">The Beginning</h2>

<p>As the comments in the source code, the bootstrap sequence is:</p>

<ul>
  <li>call osinit</li>
  <li>call schedinit</li>
  <li>make &amp; queue new G</li>
  <li>call runtimeÂ·mstart</li>
</ul>

<p>Well, it is not very detailed. Letâ€™s read the code. The bootstrap code is Assembly. You can find one example in <code class="language-plaintext highlighter-rouge">asm_386.s</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ok:
	// set up m and g "registers"
	get_tls(BX)
	LEAL	runtimeÂ·g0(SB), CX
	MOVL	CX, g(BX)
	LEAL	runtimeÂ·m0(SB), AX

	// save m-&gt;g0 = g0
	MOVL	CX, m_g0(AX)
	// save g0-&gt;m = m0
	MOVL	AX, g_m(CX)

	CALL	runtimeÂ·emptyfunc(SB)	// fault if stack check is wrong

	// convention is D is always cleared
	CLD

	CALL	runtimeÂ·check(SB)

	// saved argc, argv
	MOVL	120(SP), AX
	MOVL	AX, 0(SP)
	MOVL	124(SP), AX
	MOVL	AX, 4(SP)
	CALL	runtimeÂ·args(SB)
	CALL	runtimeÂ·osinit(SB)
	CALL	runtimeÂ·hashinit(SB)
	CALL	runtimeÂ·schedinit(SB)

	// create a new goroutine to start program
	PUSHL	$runtimeÂ·mainÂ·f(SB)	// entry
	PUSHL	$0	// arg size
	ARGSIZE(8)
	CALL	runtimeÂ·newproc(SB)
	ARGSIZE(-1)
	POPL	AX
	POPL	AX

	// start this M
	CALL	runtimeÂ·mstart(SB)

	INT $3
	RET
</code></pre></div></div>

<p>It init an <code class="language-plaintext highlighter-rouge">M</code>, and a <code class="language-plaintext highlighter-rouge">G</code> as this <code class="language-plaintext highlighter-rouge">M</code>â€™s <code class="language-plaintext highlighter-rouge">g0</code>.</p>

<p><code class="language-plaintext highlighter-rouge">runtimeÂ·schedinit</code> init the global scheduler, read <code class="language-plaintext highlighter-rouge">GOMAXPROCS</code> and start the <code class="language-plaintext highlighter-rouge">P</code>s.</p>

<p><code class="language-plaintext highlighter-rouge">runtime.main</code> and <code class="language-plaintext highlighter-rouge">runtime.newproc</code> create and queue the main Goroutine.</p>

<p><code class="language-plaintext highlighter-rouge">runtime.mstart</code> start this <code class="language-plaintext highlighter-rouge">M</code> at last.</p>

<p><code class="language-plaintext highlighter-rouge">runtime.mstart</code> will call <code class="language-plaintext highlighter-rouge">schedule</code>, <code class="language-plaintext highlighter-rouge">schedule</code> will find a runnable <code class="language-plaintext highlighter-rouge">G</code> and call <code class="language-plaintext highlighter-rouge">execute</code> on it, <code class="language-plaintext highlighter-rouge">execute</code> will call <code class="language-plaintext highlighter-rouge">runtimeÂ·gogo</code> which is defined in the Assembly files, set the program pointer and stack to run a <code class="language-plaintext highlighter-rouge">G</code>. Now the program starts running and will never return. This main goroutine is locked to the main OS thread.</p>

<p>Here is what <code class="language-plaintext highlighter-rouge">runtime.gogo</code> do, for example in <code class="language-plaintext highlighter-rouge">asm_386.s</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// void gogo(Gobuf*)
// restore state from Gobuf; longjmp
TEXT runtimeÂ·gogo(SB), NOSPLIT, $0-4
	MOVL	4(SP), BX		// gobuf
	MOVL	gobuf_g(BX), DX
	MOVL	0(DX), CX		// make sure g != nil
	get_tls(CX)
	MOVL	DX, g(CX)
	MOVL	gobuf_sp(BX), SP	// restore SP
	MOVL	gobuf_ret(BX), AX
	MOVL	gobuf_ctxt(BX), DX
	MOVL	$0, gobuf_sp(BX)	// clear to help garbage collector
	MOVL	$0, gobuf_ret(BX)
	MOVL	$0, gobuf_ctxt(BX)
	MOVL	gobuf_pc(BX), BX
	JMP	BX
</code></pre></div></div>

<h2 id="the-start-of-the-other-goroutines">The Start of the Other Goroutines</h2>

<p>When the program use the keyword <code class="language-plaintext highlighter-rouge">go</code>, it will start a new Goroutine. <code class="language-plaintext highlighter-rouge">runtimeÂ·proc</code> could start a <code class="language-plaintext highlighter-rouge">G</code> given the function. It put this new <code class="language-plaintext highlighter-rouge">G</code> in the current <code class="language-plaintext highlighter-rouge">P</code>â€™s run queue, then call <code class="language-plaintext highlighter-rouge">wakep</code> in order to call <code class="language-plaintext highlighter-rouge">startm</code>, which will get an idle <code class="language-plaintext highlighter-rouge">P</code> and run a <code class="language-plaintext highlighter-rouge">G</code> on it. If the <code class="language-plaintext highlighter-rouge">P</code> donâ€™t have an <code class="language-plaintext highlighter-rouge">M</code> for now, it will call <code class="language-plaintext highlighter-rouge">newm</code> which will alloc an <code class="language-plaintext highlighter-rouge">M</code> using <code class="language-plaintext highlighter-rouge">startm</code> as its executing function. As we already known, <code class="language-plaintext highlighter-rouge">startm</code> will start this <code class="language-plaintext highlighter-rouge">M</code>, call scheduler to find a <code class="language-plaintext highlighter-rouge">G</code> to run.</p>

<p>How the <code class="language-plaintext highlighter-rouge">P</code> finds the executable <code class="language-plaintext highlighter-rouge">G</code> will be explained in the next section.</p>

<h2 id="change-the-current-executing-goroutine">Change the Current Executing Goroutine</h2>

<h3 id="when-to-change">When to Change</h3>

<p>We know when the <code class="language-plaintext highlighter-rouge">G</code> is executing, the code will never return. It means that the scheduler of Go is non-preemptive. So when to change the current running <code class="language-plaintext highlighter-rouge">G</code>?</p>

<p>When the current Goroutine call a system call, it is the chance. It will call <code class="language-plaintext highlighter-rouge">handoffp</code>, which will release the current <code class="language-plaintext highlighter-rouge">P</code> (and set itâ€™s state to idle), start a new <code class="language-plaintext highlighter-rouge">M</code> to run the system call <code class="language-plaintext highlighter-rouge">G</code>, and then call <code class="language-plaintext highlighter-rouge">startm</code>, which will find an idle <code class="language-plaintext highlighter-rouge">P</code> and run it.</p>

<p>From Go 1.2, it increases the chance to run the scheduler. For example, when the goroutine call a function, it will check the memory and deside whether to do a scheduling.</p>

<p>This could be verified by a piece of code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package main

import (
	"fmt"
	"sync"
	"time"
)

type Counter struct {
	Count int
	Mu    sync.Mutex
}

func loop1() {
	loop1()
}

func loop2() {
	for {
	}
}

func main() {
	counter := Counter{Count: 0}
	loop2()

	for j := 0; j &lt; 10; j++ {
		go func() {
			// get uid
			counter.Mu.Lock()
			id := counter.Count
			counter.Count += 1
			counter.Mu.Unlock()

			/*
			   It will print the current number of goroutine.
			   It is a system call, so it will give other goroutines a chance to run,
			   but it just happens in the beginning,
			   so it will just allow a limited number of Goroutines to run.
			*/
			fmt.Println(id)

			/*
			  loop2() is a dead end loop. So it will block other Goroutines to run.
			  loop1() keeps call functions, so it give other Goroutines a chance to run.
			  You can see what will happen when change it to loop1()
			*/
			loop2()
		}()
	}
	fmt.Println("hi")
	time.Sleep(time.Second * 1000)
}
</code></pre></div></div>

<p>Run it with the debug options:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GODEBUG=schedtrace=1000,scheddetail=1 GOMAXPROCS=10 go run a.go
</code></pre></div></div>

<h3 id="how-to-change">How to Change</h3>

<p>Weâ€™ve know that the first Gorutine is run by the main program and never returns. So how to change the current Goroutine? The answer is it just change the current SP to the <code class="language-plaintext highlighter-rouge">g0</code> by the Assembly code. The current Goroutineâ€™s context is saved in order to be swapped back in the future. <code class="language-plaintext highlighter-rouge">g0</code> will then call the scheduler to decide which Goroutine to run next.</p>

<h3 id="which-one-to-change">Which One to Change</h3>

<p>In the last section, we know that the new started <code class="language-plaintext highlighter-rouge">G</code> is just put under the <code class="language-plaintext highlighter-rouge">P</code> that calls the <code class="language-plaintext highlighter-rouge">go</code> keyword. So the queue donâ€™t ensure fairness. However, while the <code class="language-plaintext highlighter-rouge">P</code> is able to run a new <code class="language-plaintext highlighter-rouge">G</code> but could not find any <code class="language-plaintext highlighter-rouge">G</code> in its queue, it will look up other <code class="language-plaintext highlighter-rouge">P</code>s and steal half of their <code class="language-plaintext highlighter-rouge">G</code>s if there are any. This is more effective that ensure the fairness while put <code class="language-plaintext highlighter-rouge">G</code> in the run queue since it need not lock all the scheduler to check all the <code class="language-plaintext highlighter-rouge">P</code>s run queue to ensure the fairness.</p>

<p>The code could be found in <code class="language-plaintext highlighter-rouge">findrunnable</code>.</p>

<h2 id="a-slide">A Slide</h2>

<p>A slide could be more suitable to show the point:</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38726402" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
:ET